{"version":3,"sources":["actions/actions.js","actions/actionTypes.js","api/getQuestions.js","components/QuizWelcome.js","components/App.js","reducers/quizReducer.js","store/createStore.js","index.js"],"names":["getQuestions","dispatch","type","axios","get","then","res","json","results","data","questions","mapData","correct_answer","options","map","ele","shuffleArray","incorrect_answers","resetAnswer","resetResponse","resetScore","catch","err","error","updateResponse","index","field","result","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","connect","state","quizReducer","answer","answerReducer","responses","responsesReducer","score","scoreReducer","updateAnswer","updateResponseAndScore","props","useState","active","setActive","setAnswer","e","target","value","console","log","name","class","role","aria-label","onClick","onChange","disabled","checked","filter","App","this","className","React","Component","initialState","isLoading","Array","rootReducer","combineReducers","action","store","createStore","applyMiddleware","logger","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4f3091cb.chunk.js","sourcesContent":["import {\r\n    FETCH_QUESTIONS,\r\n    FETCH_QUESTIONS_SUCCESS,\r\n    FETCH_QUESTIONS_FAIL,\r\n    UPDATE_RESPONSE,\r\n    UPDATE_SCORE,\r\n    RESET_RESPONSE,\r\n    RESET_SCORE,\r\n    UPDATE_ANSWER,\r\n    RESET_ANSWER\r\n} from './actionTypes';\r\nimport { getQuestionsApi } from '../api/getQuestions';\r\n\r\n\r\nconst fetchQuestions = () => {\r\n    return {\r\n        type: FETCH_QUESTIONS\r\n    }\r\n}\r\nconst fetchQuestionsSuccess = (json) => {\r\n    return {\r\n        type: FETCH_QUESTIONS_SUCCESS,\r\n        results: json.data.results,\r\n        questions: mapData(json.data.results, 'question'),\r\n        correct_answer: mapData(json.data.results, 'correct_answer'),\r\n        options: json.data.results.map(ele => shuffleArray([ele.correct_answer, ...ele.incorrect_answers]))\r\n    }\r\n}\r\nconst fetchQuestionsFail = (error) => {\r\n    return {\r\n        type: FETCH_QUESTIONS_FAIL,\r\n        error\r\n    }\r\n}\r\n\r\nexport const getQuestions = () => {\r\n    return dispatch => {\r\n        dispatch(fetchQuestions());\r\n        getQuestionsApi()\r\n            .then(res => {dispatch(fetchQuestionsSuccess(res));\r\n            dispatch(resetAnswer());\r\n            dispatch(resetResponse());\r\n            dispatch(resetScore())\r\n        })\r\n            .catch(err => dispatch(fetchQuestionsFail(err)))\r\n    }\r\n\r\n}\r\n\r\nexport const updateResponse = (index) => {\r\n    return {\r\n        type: UPDATE_RESPONSE,\r\n        index\r\n    }\r\n}\r\nexport const resetResponse = () => {\r\n    return {\r\n        type: RESET_RESPONSE\r\n    }\r\n}\r\nexport const updateScore = () => {\r\n    return {\r\n        type: UPDATE_SCORE\r\n    }\r\n}\r\n\r\nexport const resetScore = () => {\r\n    return {\r\n        type: RESET_SCORE\r\n    }\r\n}\r\nexport const updateAnswer = (answer, index) => {\r\n    return {\r\n        type: UPDATE_ANSWER,\r\n        answer, index\r\n    }\r\n}\r\n\r\nexport const resetAnswer = () => {\r\n    return {\r\n        type: RESET_ANSWER\r\n    }\r\n}\r\n\r\nexport const updateResponseAndScore = (index) => {\r\n    return dispatch=> {\r\n        dispatch(updateResponse(index));\r\n        dispatch(updateScore());\r\n    }\r\n    \r\n\r\n}\r\nconst mapData = (data, field) => {\r\n    return data.map(result => result[field])\r\n}\r\nconst shuffleArray = (array) => {\r\n\r\n    let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n    return array;\r\n}\r\n\r\n","export const FETCH_QUESTIONS='FETCH_QUESTIONS' ;\r\nexport const FETCH_QUESTIONS_SUCCESS = 'FETCH_QUESTIONS_SUCCESS';\r\nexport const FETCH_QUESTIONS_FAIL='FETCH_QUESTIONS_FAIL';\r\n\r\n\r\nexport const UPDATE_RESPONSE = 'UPDATE_RESPONSE';\r\nexport const RESET_RESPONSE = 'RESET_RESPONSE';\r\n\r\n\r\nexport const UPDATE_SCORE= 'UPDATE_SCORE';\r\nexport const RESET_SCORE = 'RESET_SCORE';\r\n\r\nexport const UPDATE_ANSWER = 'UPDATE_ANSWER';\r\nexport const RESET_ANSWER= 'RESET_ANSWER';","import axios from 'axios';\r\n\r\nconst getQuestionsApi = () => {\r\n    return axios.get('https://opentdb.com/api.php?amount=5&category=15&difficulty=easy&type=multiple');\r\n}\r\n\r\nexport { getQuestionsApi };","import React, { useState, useSelector, useDispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/Quiz.css';\r\nimport { updateAnswer, updateResponse, updateResponseAndScore, getQuestions } from '../actions/actions';\r\n\r\nconst QuizWelcome = (props) => {\r\n\r\n    let { questions, correct_answer, options,getQuestions, updateAnswer, updateResponseAndScore, answer, updateResponse, responses , score} = props;\r\n    const [active, setActive] = useState(0);\r\n    const buttonActive = (e) => {\r\n        setActive(e.target.value);\r\n    }\r\n    const setAnswer = (e) => {\r\n        updateAnswer(e.target.value, active);\r\n        console.log(e.target.value, e.target.name)\r\n    };\r\n    const submitHandler = () => {\r\n        answer[active] === correct_answer[active] ?\r\n            updateResponseAndScore(active) :\r\n            updateResponse(active);\r\n    }\r\n    const nextQuestionHandler = () => {\r\n        if (active !== 4) {\r\n            setActive(+active + 1)\r\n        }\r\n    }\r\n    const resetQuiz=()=>{\r\n        setActive(0)\r\n        getQuestions()\r\n    }\r\n    return (\r\n        <>\r\n            <div class=\"centered-element\" >\r\n                {questions.length ?\r\n                    <>\r\n                        <div class=\"btn-group-vertical\" role=\"group\" aria-label=\"Basic example\" onClick={buttonActive}>\r\n                            <button type=\"button\" class={`btn ${active == 0 ? 'btn-primary' : 'btn-secondary'}`} value={0}>1</button>\r\n                            <button type=\"button\" class={`btn ${active == 1 ? 'btn-primary' : 'btn-secondary'}`} value={1}>2</button>\r\n                            <button type=\"button\" class={`btn ${active == 2 ? 'btn-primary' : 'btn-secondary'}`} value={2}>3</button>\r\n                            <button type=\"button\" class={`btn ${active == 3 ? 'btn-primary' : 'btn-secondary'}`} value={3}>4</button>\r\n                            <button type=\"button\" class={`btn ${active == 4 ? 'btn-primary' : 'btn-secondary'}`} value={4}>5</button>\r\n\r\n                        </div>\r\n                        <div class=\"card\">\r\n                            <div class=\"card-body\">\r\n                                <h5 class=\"card-title\">Question no. {+active + 1}</h5>\r\n                                <p class=\"card-text\">{questions ? questions[active] : null}</p>\r\n                                <div class=\"gridDisplay\" >\r\n                                    {options ?\r\n                                        options[active].map(ele => {\r\n                                            return (<span>\r\n                                                <input type=\"radio\" onChange={setAnswer} disabled={responses[active]} value={ele} name=\"answer\" checked={ele === answer[active]} /> {ele}\r\n                                            </span>)\r\n                                        })\r\n                                        : null}\r\n                                </div>\r\n                            </div>\r\n                            <div >\r\n                                <button class=\"btn btn-secondary submit\" disabled={!answer[active] || responses[active]} onClick={submitHandler}>Submit</button>\r\n                                {active != 4 ? <button class=\"btn btn-secondary submit\" onClick={nextQuestionHandler}>Next </button> : null}\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                    </>\r\n                    : \"is Loading ....\"}\r\n\r\n\r\n            </div>\r\n            <div>\r\n            <div class=\"card result\">\r\n                     <div class=\"card-body\">\r\n                         Score: {score}/{5}\r\n                     </div>\r\n                   {responses.filter(res => res).length === 5 ? <button class=\"btn btn-secondary resetButton\" onClick={resetQuiz}>Reset</button>: null}\r\n                 </div>\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        questions: state.quizReducer.questions,\r\n        correct_answer: state.quizReducer.correct_answer,\r\n        options: state.quizReducer.options,\r\n        answer: state.answerReducer.answer,\r\n        responses: state.responsesReducer.responses,\r\n        score: state.scoreReducer.score\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getQuestions: ()=> dispatch(getQuestions()),\r\n        updateAnswer: (answer, index) => dispatch(updateAnswer(answer, index)),\r\n        updateResponseAndScore: (index) => dispatch(updateResponseAndScore(index)),\r\n        updateResponse: (index) => dispatch(updateResponse(index))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizWelcome);\r\n","import React from 'react';\r\nimport QuizWelcome from './QuizWelcome'\r\nimport '../styles/App.css';\r\nimport { connect } from 'react-redux';\r\nimport  {getQuestions}  from '../actions/actions';\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    console.log(this.props)\r\n    this.props.getQuestions();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"back\">\r\n        <QuizWelcome />\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getQuestions: ()=> dispatch(getQuestions()) \r\n  }\r\n}\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import {\r\n    FETCH_QUESTIONS,\r\n    FETCH_QUESTIONS_SUCCESS,\r\n    FETCH_QUESTIONS_FAIL,\r\n    UPDATE_RESPONSE,\r\n    UPDATE_SCORE,\r\n    RESET_RESPONSE,\r\n    RESET_SCORE,\r\n    UPDATE_ANSWER,\r\n    RESET_ANSWER\r\n} from '../actions/actionTypes';\r\nimport {combineReducers} from 'redux'\r\n\r\nconst initialState= {\r\n    isLoading: false, \r\n    questions: [],\r\n    responses: [],\r\n    score: 0,\r\n    answer: new Array(5)\r\n}\r\n\r\nconst quizReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_QUESTIONS: return { ...state, isLoading: true }\r\n        case FETCH_QUESTIONS_SUCCESS: return { ...state, questions : action.questions, correct_answer: action.correct_answer,options: action.options, isLoading: false }\r\n        case FETCH_QUESTIONS_FAIL: return { ...state, err: action.err, isLoading: false }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nconst responsesReducer = (state = {responses: []}, action)=> {\r\n    switch(action.type){\r\n        case UPDATE_RESPONSE:{\r\n            let responses = [...state.responses];\r\n            responses[action.index]= true\r\n            return {... state,responses}\r\n        } \r\n        case RESET_RESPONSE: return {...state, responses: []}\r\n        default: return state;\r\n    }\r\n}\r\n\r\nconst scoreReducer = (state = {score:0}, action)=> {\r\n    switch(action.type){\r\n        case UPDATE_SCORE: return {... state,score: state.score +1 }\r\n        case RESET_SCORE: return {...state, score: 0}\r\n        default: return state;\r\n    }\r\n}\r\nconst answerReducer = (state= {answer:[]}, action) => {\r\n    switch(action.type) {\r\n        case UPDATE_ANSWER: {\r\n            let answer = [...state.answer];\r\n            answer[action.index]= action.answer\r\n            return {... state,answer}\r\n        } \r\n        case RESET_ANSWER: return {...state, answer: []};\r\n        default: return state;\r\n    }\r\n}\r\nexport const rootReducer = combineReducers({\r\n    quizReducer, responsesReducer, scoreReducer, answerReducer\r\n});","import {createStore, applyMiddleware} from 'redux';\r\nimport {rootReducer} from '../reducers/quizReducer';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport logger  from 'redux-logger';\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(logger, thunkMiddleware));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport { store } from './store/createStore'\r\nimport { Provider } from 'react-redux';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}